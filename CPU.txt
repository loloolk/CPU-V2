Fixed Length Instruction Encoding
1 - Immediate Value, 1 - Inverter, 4 - OPCODE, 3 - SRC1, 3 - SRC2, 3 - DST, 1- NULL

Reg Codes:
0-7: a, b, c, d, e, f, bp, sp
COMPARATOR BITS:
less, equal, greater, not equal

OPCODES:

0x00 - noop - No Operation
0x01 - mov - Move data from SRC 1 to DST
0x01 (INV) - Not SCR 1 and store in DST
0x02 - And SCR 1 & SRC 2 and store in DST
0x02 (INV) - Nand SCR 1 & SRC 2 and store in DST
0x03 - Or SCR 1 & SRC 2 and store in DST
0x03 (INV) - Nor SCR 1 & SRC 2 and store in DST
0x04 - Xor SCR 1 & SRC 2 and store in DST
0x04 (INV) - Xnor SCR 1 & SRC 2 and store in DST

0x05 - Add SCR 1 & SRC 2 and store in DST
0x06 - Sub SCR 1 & SRC 2 and store in DST
0x07 - Shl SCR 1 and store in DST
0x08 - Shr SCR 1 and store in DST

0x09 - cmp - Compare SCR 1 and SRC 2 (result store in compare register)
0x0a - jmp - Jump to address defined in SRC 1
0x0b - je - Jump to address defined in SRC 1 if equality bit is set in compare register
0x0b (INV) - jne - Jump to address defined in SRC 1 if equality bit is not set in compare register
0x0c - jl - Jump to address defined in SRC 1 if less-than bit is set in compare register
0x0c (INV) - jge - Jump to address defined in SRC 1 if less-than bit is not set in compare register
0x0d - jg - Jump to address defined in SRC 1 if greater-than bit is set in compare register
0x0d (INV) - jle - Jump to address defined in SRC 1 if greater-than bit is not set in compare register

0x0e - wrt - Write the memory at address SRC 2, the data in SRC 1
0x0e (INV) - push - Write mem at address in sp, the data in SRC 1, increment sp by 1
0x0f - read - Read mem at address SRC 2, store in DST
0x0f (INV) - pop - Decrement sp by 1, read mem at address in sp, store in DST. 

Immediate Value Overwrites SRC1

Sub Commands:
res - Resets register by xoring it with itself (same as mov 0, 1 clock tick faster)

Fibonacci sequence:
0000 8402 0001 1414 7900 0480 0502 a800
0003

Prime Number Solver:
0x0000
imm 100->R0 | 0x8400 0x0064
mov R0->SP  | 0x040E

imm 2->R1   | 0x8402 0x0002

loop1: (0x0006)
PUSH R0     | 0x7800
SHR R0->R0  | 0x2000
CMP R0 R1   | 0x2410
POP R0      | 0x7C00
JLi end     | 0xB000 0x0018

mov R1->R2   | 0x0484
Add R2+R2->R2| 0x1524

loop2: (0x000e)
WRTi 0x00ff, [R2] | 0xB820 0x00FF
ADD R1+R2->R2 | 0x14A4
CMP R2 R0   | 0x2500
JLEi loop2  | 0xF400 0x000E

ADDi 1+R1->R1 | 0x9412 0x0001
JMPi loop1  | 0xA800 0x0006

end: (0x0018)

0000 8400 0064 040e 8402 0002 7800 2000
2410 7c00 b000 0018 0484 1524 b820 00ff
14a4 2500 f400 000e 9412 0001 a800 0006

2, 3, 5, 7, 
11, 13, 17, 19, 
23, 29, 
31, 37, 
41, 43, 47, 
53, 59, 
61, 67, 
71, 73, 79, 
83, 89, 
97

Future Possible Improvements:
Floating Point Operations
Visual Interface
RAM to PROGRAM pipeline (load programs from RAM into instructions)
signed support
Peripheral interface (?)

For 4 bit (x) by 4 bit (y) multiplication
for i=0-4 {
If x & 0x1 == 1 {
x += (y << 4)
x >> 1
}
}